using System;
using System.Drawing;
using System.Runtime.InteropServices;
using System.IO;
using System.Collections.Generic;
using System.Linq;
public class IconExtractor {
    [DllImport("shell32.dll", EntryPoint = "ExtractIconExW", CharSet = CharSet.Unicode, SetLastError = true)] public static extern int ExtractIconEx( string lpszFile, int nIconIndex, IntPtr[] phiconLarge, IntPtr[] phiconSmall, int nIcons );
    [DllImport("user32.dll", SetLastError = true)] [return: MarshalAs(UnmanagedType.Bool)] public static extern bool DestroyIcon(IntPtr hIcon);
    public static Icon GetIcon(string fileName, int index, bool large) { IntPtr[] phicon = new IntPtr[1]; int count = 0; if (large) { count = ExtractIconEx(fileName, index, phicon, null, 1); } else { count = ExtractIconEx(fileName, index, null, phicon, 1); } if (count > 0 && phicon[0] != IntPtr.Zero) { Icon icon = Icon.FromHandle(phicon[0]); Icon copy = (Icon)icon.Clone(); DestroyIcon(phicon[0]); return copy; } return null; }
    public static int GetIconCount(string fileName) { return ExtractIconEx(fileName, -1, null, null, 0); }
    public static void Main(string[] args) {
        string targetDir = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Desktop), "Icons");
        if (!Directory.Exists(targetDir)) { Directory.CreateDirectory(targetDir); Console.WriteLine("Created directory: {0}", targetDir); } else { Console.WriteLine("Using existing directory: {0}", targetDir); }
        string[] explicitDlls = new string[] { @"C:\Windows\System32\user32.dll", @"C:\Windows\System32\imageres.dll", @"C:\Windows\System32\moricons.dll", @"C:\Windows\System32\pifmgr.dll", @"C:\Windows\System32\shell32.dll", @"C:\Windows\System32\ddores.dll", @"C:\Windows\System32\compstui.dll", @"C:\Windows\System32\setupapi.dll", @"C:\Windows\System32\mmcndmgr.dll", @"C:\Windows\System32\control.exe", @"C:\Windows\System32\zipfldr.dll", @"C:\Windows\System32\ieframe.dll", @"C:\Windows\System32\mstscax.dll", @"C:\Windows\System32\AccessibilityCpl.dll", @"C:\Windows\System32\ActionCenterCPL.dll", @"C:\Windows\System32\AppxPackaging.dll", @"C:\Windows\System32\AuthFWWiz.dll", @"C:\Windows\System32\CertEnroll.dll", @"C:\Windows\System32\ComCtl32.dll", @"C:\Windows\System32\DateTimePicker.dll", @"C:\Windows\System32\DeviceCenter.dll", @"C:\Windows\System32\desk.cpl", @"C:\Windows\System32\DevQuery.dll", @"C:\Windows\System32\DiagnosticsHub.Scripted.dll", @"C:\Windows\System32\diagperf.dll", @"C:\Windows\System32\Display.dll", @"C:\Windows\System32\dsquery.dll", @"C:\Windows\System32\DUser.dll", @"C:\Windows\System32\dwmapi.dll", @"C:\Windows\System32\DXP.dll", @"C:\Windows\System32\eapqec.dll", @"C:\Windows\System32\energy.dll", @"C:\Windows\System32\execmodel.dll", @"C:\Windows\System32\ExplorerFrame.dll", @"C:\Windows\System32\fhcpl.dll", @"C:\Windows\System32\Flighting.dll", @"C:\Windows\System32\Fontext.dll", @"C:\Windows\System32\GamePanel.dll", @"C:\Windows\System32\GameUX.dll", @"C:\Windows\System32\glu32.dll", @"C:\Windows\System32\gpmgmt.dll", @"C:\Windows\System32\hid.dll", @"C:\Windows\System32\hgcpl.dll", @"C:\Windows\System32\hotplug.dll", @"C:\Windows\System32\hvsig.dll", @"C:\Windows\System32\iasrad.dll", @"C:\Windows\System32\icfapi.dll", @"C:\Windows\System32\icsv6.dll", @"C:\Windows\System32\idna.dll", @"C:\Windows\System32\InetCtls.dll", @"C:\Windows\System32\irprops.cpl", @"C:\Windows\System32\iscsicpl.dll", @"C:\Windows\System32\izactv.dll", @"C:\Windows\System32\kernel32.dll", @"C:\Windows\System32\keyset.dll", @"C:\Windows\System32\kbdmgr.dll", @"C:\Windows\System32\l2gpstore.dll", @"C:\Windows\System32\legacyap.dll", @"C:\Windows\System32\Licenses.dll", @"C:\Windows\System32\LocalMachineProfile.dll", @"C:\Windows\System32\localspl.dll", @"C:\Windows\System32\MagneticStripeReader.dll", @"C:\Windows\System32\Magnify.exe", @"C:\Windows\System32\main.cpl", @"C:\Windows\System32\mcx2prov.dll", @"C:\Windows\System32\mdminst.dll", @"C:\Windows\System32\mf.dll", @"C:\Windows\System32\mfreadwrite.dll", @"C:\Windows\System32\miutils.dll", @"C:\Windows\System32\mobsync.dll", @"C:\Windows\System32\msctf.dll", @"C:\Windows\System32\Mshtml.dll", @"C:\Windows\System32\mscms.dll", @"C:\Windows\System32\mssph.dll", @"C:\Windows\System32\msports.dll", @"C:\Windows\System32\mstask.dll", @"C:\Windows\System32\netcenter.dll", @"C:\Windows\System32\netcfgx.dll", @"C:\Windows\System32\netjoin.dll", @"C:\Windows\System32\ntshrui.dll", @"C:\Windows\System32\NuiSensor.dll", @"C:\Windows\System32\ocsetapi.dll", @"C:\Windows\System32\oleacc.dll", @"C:\Windows\System32\Osk.exe", @"C:\Windows\System32\pcaui.dll", @"C:\Windows\System32\PeerDist.dll", @"C:\Windows\System32\perfts.dll", @"C:\Windows\System32\pnpui.dll", @"C:\Windows\System32\powercpl.dll", @"C:\Windows\System32\printui.dll", @"C:\Windows\System32\profapi.dll", @"C:\Windows\System32\propsys.dll", @"C:\Windows\System32\ProvisioningHandlers.dll", @"C:\Windows\System32\qosprop.dll", @"C:\Windows\System32\rasdlg.dll", @"C:\Windows\System32\rdpclip.exe", @"C:\Windows\System32\rdpshell.dll", @"C:\Windows\System32\riched20.dll", @"C:\Windows\System32\riched32.dll", @"C:\Windows\System32\RTMediaFrame.dll", @"C:\Windows\System32\sbe.dll", @"C:\Windows\System32\scavenge.dll", @"C:\Windows\System32\scenetext.dll", @"C:\Windows\System32\scrnsave.scr", @"C:\Windows\System32\sdclt.exe", @"C:\Windows\System32\seclogon.dll", @"C:\Windows\System32\SecurityHealthBroker.dll", @"C:\Windows\System32\SensorsNativeApi.dll", @"C:\Windows\System32\shdocvw.dll", @"C:\Windows\System32\shellstyle.dll", @"C:\Windows\System32\sihost.exe", @"C:\Windows\System32\slui.exe", @"C:\Windows\System32\sndvols.dll", @"C:\Windows\System32\SnmpApi.dll", @"C:\Windows\System32\SpoolerMigration.dll", @"C:\Windows\System32\sppc.dll", @"C:\Windows\System32\srmclient.dll", @"C:\Windows\System32\srutil.dll", @"C:\Windows\System32\sxs.dll", @"C:\Windows\System32\SyncCenter.dll", @"C:\Windows\System32\TapiSysprep.dll", @"C:\Windows\System32\taskmgr.exe", @"C:\Windows\System32\TelephonyCpl.dll", @"C:\Windows\System32\themeui.dll", @"C:\Windows\System32\tpm.dll", @"C:\Windows\System32\tsgqec.dll", @"C:\Windows\System32\twinui.dll", @"C:\Windows\System32\tzsync.dll", @"C:\Windows\System32\ucrtbase.dll", @"C:\Windows\System32\uiautomationcore.dll", @"C:\Windows\System32\ulib.dll", @"C:\Windows\System32\undo.dll", @"C:\Windows\System32\unimdm.dll", @"C:\Windows\System32\upnp.dll", @"C:\Windows\System32\usbperf.dll", @"C:\Windows\System32\userenv.dll", @"C:\Windows\System32\uxlib.dll", @"C:\Windows\System32\vdsutil.dll", @"C:\Windows\System32\verifier.dll", @"C:\Windows\System32\WDSClient.dll", @"C:\Windows\System32\webio.dll", @"C:\Windows\System32\wecapi.dll", @"C:\Windows\System32\wfapigrp.dll", @"C:\Windows\System32\WimBoot.dll", @"C:\Windows\System32\WinFax.dll", @"C:\Windows\System32\winhttp.dll", @"C:\Windows\System32\wininet.dll", @"C:\Windows\System32\winresume.dll", @"C:\Windows\System32\wlanapi.dll", @"C:\Windows\System32\wlg.dll", @"C:\Windows\System32\WMALFXGFX.dll", @"C:\Windows\System32\wmiclnt.dll", @"C:\Windows\System32\wmps.dll", @"C:\Windows\System32\WofUtil.dll", @"C:\Windows\System32\WUDFx000.dll", @"C:\Windows\System32\wups.dll", @"C:\Windows\System32\wuweb.dll", @"C:\Windows\System32\xinput1_3.dll", @"C:\Windows\System32\xolehlp.dll", @"C:\Windows\System32\xpsprint.dll", @"C:\Windows\System32\CertMgr.dll", @"C:\Windows\System32\DismApi.dll", @"C:\Windows\System32\DismCore.dll", @"C:\Windows\System32\DnsClient.dll", @"C:\Windows\System32\EventViewer.dll", @"C:\Windows\System32\fveui.dll", @"C:\Windows\System32\InetCpl.cpl", @"C:\Windows\System32\mdmcommon.dll", @"C:\Windows\System32\msdtckrm.dll", @"C:\Windows\System32\msxml3.dll", @"C:\Windows\System32\msxml6.dll", @"C:\Windows\System32\networkexplorer.dll", @"C:\Windows\System32\NetworkMap.dll", @"C:\Windows\System32\PortableDeviceConnectApi.dll", @"C:\Windows\System32\powercfg.cpl", @"C:\Windows\System32\rasapi32.dll", @"C:\Windows\System32\rasman.dll", @"C:\Windows\System32\RegCtrl.dll", @"C:\Windows\System32\setupcln.dll", @"C:\Windows\System32\shacct.dll", @"C:\Windows\System32\srm.dll", @"C:\Windows\System32\tabbtn.dll", @"C:\Windows\System32\tsmmc.dll", @"C:\Windows\System32\urlmon.dll", @"C:\Windows\System32\webcheck.dll", @"C:\Windows\System32\wercplsupport.dll", @"C:\Windows\System32\werdiagcontroller.dll", @"C:\Windows\System32\werui.dll", @"C:\Windows\System32\winmm.dll", @"C:\Windows\System32\wintrust.dll", @"C:\Windows\System32\wmnetmgr.dll", @"C:\Windows\System32\wmsdmoe.dll", @"C:\Windows\System32\wpnres.dll", @"C:\Windows\System32\wshtcpip.dll", @"C:\Windows\System32\xactengine2.dll", @"C:\Windows\System32\xactengine3.dll", @"C:\Windows\System32\xactengine3_0.dll", @"C:\Windows\System32\netshell.dll", @"C:\Windows\System32\appwiz.cpl", @"C:\Windows\System32\timedate.cpl", @"C:\Windows\System32\wuapi.dll", @"C:\Windows\System32\devmgr.dll", @"C:\Windows\System32\ncpa.cpl", @"C:\Windows\System32\GameExplorer.dll", @"C:\Windows\System32\pnidui.dll", @"C:\Windows\System32\StikyNot.exe", @"C:\Windows\System32\ActionCenter.dll", @"C:\Windows\System32\twinui.appcore.dll", @"C:\Windows\System32\Windows.UI.Xaml.dll", @"C:\Windows\System32\Windows.Globalization.dll", @"C:\Windows\System32\SpeechTray.exe", @"C:\Windows\System32\sysdm.cpl", @"C:\Windows\System32\intl.cpl", @"C:\Windows\System32\telephon.cpl", @"C:\Windows\System32\wscui.cpl", @"C:\Windows\System32\notepad.exe", @"C:\Windows\System32\calc.exe", @"C:\Windows\System32\mspaint.exe", @"C:\Windows\System32\snippingtool.exe", @"C:\Windows\System32\cmd.exe", @"C:\Windows\System32\powershell.exe", @"C:\Windows\System32\write.exe", @"C:\Windows\System32\Narrator.exe", @"C:\Windows\System32\msconfig.exe", @"C:\Windows\System32\dxdiag.exe", @"C:\Windows\System32\charmap.exe", @"C:\Windows\System32\odbcad32.exe", @"C:\Windows\System32\OptionalFeatures.exe", @"C:\Windows\System32\SystemPropertiesAdvanced.exe", @"C:\Windows\System32\SystemPropertiesComputerName.exe", @"C:\Windows\System32\SystemPropertiesHardware.exe", @"C:\Windows\System32\SystemPropertiesPerformance.exe", @"C:\Windows\System32\SystemPropertiesProtection.exe", @"C:\Windows\System32\SystemPropertiesRemote.exe" };
        string[] searchPaths = new string[] { @"C:\Windows\System32", @"C:\Windows\SysWOW64", @"C:\Windows\SystemApps", @"C:\Program Files\Windows Defender", @"C:\Program Files\Common Files\Microsoft Shared\Ink", @"C:\Windows\Branding\BaseBrd", @"C:\Windows\Speech_OneCore\Engines\TTS", @"C:\Windows\explorer.exe", @"C:\Windows\Fonts", @"C:\Windows\Help", @"C:\Windows\Microsoft.NET\Framework64", @"C:\Windows\Globalization", @"C:\Windows\WinSxS", @"C:\Windows\System32\drivers", @"C:\Windows\diagnostics", @"C:\Windows\CbsTemp", @"C:\Windows\Web", @"C:\Windows\L2Schemas", @"C:\Windows\IME", @"C:\Windows\diagnostics\system\aero", @"C:\Windows\SystemResources", @"C:\Windows\INF", @"C:\Windows\PolicyDefinitions", @"C:\Windows\Globalization\Resources" };
        HashSet<string> allFilesToProcess = new HashSet<string>();
        foreach (string explicitDll in explicitDlls) { allFilesToProcess.Add(explicitDll); }
        foreach (string path in searchPaths) {
            if (Directory.Exists(path)) {
                SearchOption currentSearchOption = (path.Equals(@"C:\Windows\System32", StringComparison.OrdinalIgnoreCase) || path.Equals(@"C:\Windows\SysWOW64", StringComparison.OrdinalIgnoreCase)) ? SearchOption.TopDirectoryOnly : SearchOption.AllDirectories;
                try { foreach (string file in Directory.EnumerateFiles(path, "*.dll", currentSearchOption)) { allFilesToProcess.Add(file); } } catch (UnauthorizedAccessException) { Console.WriteLine("Warning: Access denied to path '{0}'. Skipping DLLs in subdirectories.", path); } catch (PathTooLongException) { Console.WriteLine("Warning: Path too long in '{0}'. Skipping DLLs.", path); }
                try { foreach (string file in Directory.EnumerateFiles(path, "*.exe", currentSearchOption)) { allFilesToProcess.Add(file); } } catch (UnauthorizedAccessException) { Console.WriteLine("Warning: Access denied to path '{0}'. Skipping EXEs in subdirectories.", path); } catch (PathTooLongException) { Console.WriteLine("Warning: Path too long in '{0}'. Skipping EXEs.", path); }
            } else if (File.Exists(path)) { allFilesToProcess.Add(path); }
        }
        Console.Clear(); Console.WriteLine("Finally, I don't have to find a fucking icon anymore."); System.Threading.Thread.Sleep(5000); Console.Clear();
        foreach (string sourceFile in allFilesToProcess.Distinct()) {
            if (!File.Exists(sourceFile)) { Console.WriteLine("Warning: Skipping '{0}' as it was not found.", sourceFile); continue; }
            Console.WriteLine("Attempting to extract icons from: {0}", sourceFile);
            int iconCountReported = 0;
            try { iconCountReported = IconExtractor.GetIconCount(sourceFile); } catch (Exception ex) { Console.WriteLine("Warning: Could not get icon count for '{0}': {1}", sourceFile, ex.Message); }
            Console.WriteLine("Found {0} icons reported by ExtractIconEx for {1}.", iconCountReported, sourceFile);
            int maxIndexToTry = iconCountReported;
            if (sourceFile.Contains("user32.dll") || sourceFile.Contains("shell32.dll")) { maxIndexToTry = Math.Max(iconCountReported, 5000); }
            else if (sourceFile.Contains("imageres.dll")) { maxIndexToTry = Math.Max(iconCountReported, 2000); }
            else if (sourceFile.Contains("moricons.dll")) { maxIndexToTry = Math.Max(iconCountReported, 300); }
            else if (sourceFile.Contains("pifmgr.dll")) { maxIndexToTry = Math.Max(iconCountReported, 100); }
            else { maxIndexToTry = Math.Max(iconCountReported, 1000); }
            for (int i = 0; i < maxIndexToTry; i++) {
                try {
                    Icon largeIcon = IconExtractor.GetIcon(sourceFile, i, true);
                    if (largeIcon != null && largeIcon.Width > 0 && largeIcon.Height > 0) { string baseFileName = Path.GetFileNameWithoutExtension(sourceFile); string iconPathLarge = Path.Combine(targetDir, string.Format("{0}_icon_{1}_large.ico", baseFileName, i)); if (!File.Exists(iconPathLarge)) { using (FileStream fileStream = new FileStream(iconPathLarge, FileMode.Create, FileAccess.Write)) { largeIcon.Save(fileStream); } Console.WriteLine("Successfully extracted large icon {0} from {1} to {2}", i, baseFileName, iconPathLarge); } largeIcon.Dispose(); }
                    Icon smallIcon = IconExtractor.GetIcon(sourceFile, i, false);
                    if (smallIcon != null && smallIcon.Width > 0 && smallIcon.Height > 0) { string baseFileName = Path.GetFileNameWithoutExtension(sourceFile); string iconPathSmall = Path.Combine(targetDir, string.Format("{0}_icon_{1}_small.ico", baseFileName, i)); if (!File.Exists(iconPathSmall)) { using (FileStream fileStream = new FileStream(iconPathSmall, FileMode.Create, FileAccess.Write)) { smallIcon.Save(fileStream); } Console.WriteLine("Successfully extracted small icon {0} from {1} to {2}", i, baseFileName, iconPathSmall); } smallIcon.Dispose(); }
                } catch (ArgumentOutOfRangeException) { } catch (Exception ex) { Console.WriteLine("Warning: An error occurred while extracting icon {0} from {1}. Error: {2}", i, sourceFile, ex.Message); }
            }
        }
        Console.WriteLine("Icon extraction attempt completed. Please check the '{0}' folder on your Desktop for the extracted icons.", targetDir);
    }
}